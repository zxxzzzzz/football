
edition: 3.0.0
name: ball
access: "default"

resources:
  data:
    component: fc3
    props: # 组件的属性值
      region: cn-hangzhou # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      functionName: data
      runtime: nodejs16
      code: ./code
      cpu: 0.3
      handler: index.data
      memorySize: 512
      diskSize: 512
      description: '球类网站缓存数据'
      timeout: 60
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      instanceConcurrency: 1
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
              - POST
  basketballData:
    component: fc3
    props: # 组件的属性值
      region: cn-hangzhou # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      functionName: basketballData
      runtime: nodejs16
      code: ./code
      cpu: 0.3
      handler: index.basketballData
      memorySize: 512
      diskSize: 512
      description: 'lan球类网站缓存数据'
      timeout: 60
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      instanceConcurrency: 1
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - POST
  setting:
    component: fc3
    props: # 组件的属性值
      region: cn-hangzhou # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      functionName: setting
      runtime: nodejs16
      code: ./code
      cpu: 0.3
      handler: index.setting
      memorySize: 512
      diskSize: 512
      description: '球类网站设置'
      timeout: 60
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      instanceConcurrency: 1
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
              - POST
  request:
    component: fc3
    props: # 组件的属性值
      region: cn-hangzhou # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      functionName: request
      runtime: nodejs16
      code: ./code
      cpu: 0.3
      handler: index.getRequest
      memorySize: 512
      diskSize: 512
      description: 'request test'
      timeout: 60
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      instanceConcurrency: 1
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
  dataUpdate:
    component: fc3
    props: # 组件的属性值
      region: cn-hangzhou # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      functionName: dataUpdate
      runtime: nodejs16
      code: ./code
      cpu: 0.3
      handler: index.dataUpdate
      memorySize: 512
      diskSize: 512
      description: '数据更新'
      timeout: 60
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      instanceConcurrency: 1
      triggers:
        - triggerName: cron-tab-trigger
          triggerType: timer
          triggerConfig:
            cronExpression: 'CRON_TZ=Asia/Shanghai 0 0/1 * * * ?'
            enable: true
  static: # 静态文件服务
    component: fc3 
    props: 
      layers:
        - acs:fc:cn-hangzhou:1048992591952509:layers/ball/versions/2
      functionName: static
      region: cn-hangzhou
      code: ./code
      runtime: nodejs16
      handler: index.static
      instanceConcurrency: 1
      memorySize: 128
      diskSize: 512
      description: '静态服务'
      cpu: 0.1
      timeout: 20
      triggers:
        - triggerName: httpTrigger
          triggerType: http
          triggerConfig:
            authType: anonymous
            methods:
              - GET
  fc-domain: #  服务名称
    component: fc3-domain
    props: #  组件的属性值
      region: cn-hangzhou
      domainName: auto
      protocol: HTTP # HTTP | HTTPS 
      routeConfig:
        routes:
          - functionName: data
            methods:
              - POST
              - GET
            path: /data/*
            qualifier: LATEST
          - functionName: basketballData
            methods:
              - POST
              - GET
            path: /basketballData/*
            qualifier: LATEST
          - functionName: setting
            methods:
              - POST
              - GET
            path: /setting
            qualifier: LATEST
          - functionName: request
            methods:
              - GET
            path: /request
            qualifier: LATEST
          - functionName: static
            methods:
              - GET
            path: /*
            qualifier: LATEST
