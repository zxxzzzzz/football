# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 1.0.0
name: football
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "default"

vars: # 全局变量
  region: "cn-hangzhou"
  service:
    name: "web-framework"
    description: 'Serverless Devs Web Framework Service'
    logConfig: auto

services:
  framework: # 业务名称/模块名称
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - run: npm install --production # 要执行的系统命令，类似于一种钩子的形式
          path: ./code # 执行系统命令/钩子的路径
        - run: npm run build # 要执行的系统命令，类似于一种钩子的形式
          path: ./code # 执行系统命令/钩子的路径
    props: # 组件的属性值
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "todolist"
        description: 'Serverless Devs Web Framework Function'
        runtime: nodejs16
        codeUri: ./code
        handler: index.handler
        instanceConcurrency: 10
        memorySize: 512
        diskSize: 512
        cpu: 0.3
        timeout: 60
        instanceLifecycleConfig:      # 扩展函数
          preStop:                    # PreStop 函数
            handler: index.preStop    # 函数入口
            timeout: 60               # 超时时间
        environmentVariables:
          password: ${env(password)}
          username: ${env(username)}
          key: ${env(key)}
          secret: ${env(secret)}
          webhook: ${env(webhook)}
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
  info: # 按时提醒
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - run: npm install --production # 要执行的系统命令，类似于一种钩子的形式
          path: ./code # 执行系统命令/钩子的路径
    props: # 组件的属性值
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "info"
        description: 'info warning'
        runtime: nodejs16
        codeUri: ./code
        handler: index.infoHandler
        instanceConcurrency: 1
        memorySize: 128
        diskSize: 512
        cpu: 0.1
        timeout: 5
      triggers:
        - name: cron-tab-trigger
          type: timer
          config:
            payload: ''
            cronExpression: 'CRON_TZ=Asia/Shanghai 0 0/1 11-23 * * ?'
            enable: true
